{"version":3,"names":[],"sources":["types.ts"],"sourcesContent":["import React, { type RefObject } from 'react';\nimport { type ActionSheetOptions } from '@expo/react-native-action-sheet';\nimport {\n  type TextInput,\n  type StyleProp,\n  type TextStyle,\n  type ViewStyle,\n} from 'react-native';\nimport { type ActionsProps } from '../Actions';\nimport { type AvatarProps } from '../Avatar';\nimport { type ComposerProps } from '../Composer';\nimport { type DayProps } from '../Day';\nimport { type InputToolbarProps } from '../InputToolbar';\nimport { type LoadEarlierProps } from '../LoadEarlier';\nimport { type MessageProps } from '../Message';\nimport { type MessageTextProps } from '../MessageText';\nimport {\n  type IMessage,\n  type LeftRightStyle,\n  type MessageAudioProps,\n  type MessageVideoProps,\n  type Reply,\n  type User,\n} from '../types';\nimport { type QuickRepliesProps } from '../QuickReplies';\nimport { type SendProps } from '../Send';\nimport { type SystemMessageProps } from '../SystemMessage';\nimport { type TimeProps } from '../Time';\nimport {\n  type AnimatedList,\n  type ListViewProps,\n  type MessageContainerProps,\n} from '../MessageContainer';\nimport { type BubbleProps } from '../Bubble';\n\nexport interface GiftedChatProps<TMessage extends IMessage>\n  extends Partial<MessageContainerProps<TMessage>> {\n  /* Message container ref */\n  messageContainerRef?: RefObject<AnimatedList<TMessage>>;\n  /* text input ref */\n  textInputRef?: RefObject<TextInput>;\n  /* Messages to display */\n  messages?: TMessage[];\n  /* Typing Indicator state */\n  isTyping?: boolean;\n  /* Controls whether or not to show user.name property in the message bubble */\n  renderUsernameOnMessage?: boolean;\n  /* Messages container style */\n  messagesContainerStyle?: StyleProp<ViewStyle>;\n  /* Input text; default is undefined, but if specified, it will override GiftedChat's internal state */\n  text?: string;\n  /* Controls whether or not the message bubbles appear at the top of the chat */\n  alignTop?: boolean;\n  /* enables the isScrollToBottomEnabled Component */\n  isScrollToBottomEnabled?: boolean;\n  /* Scroll to bottom wrapper style */\n  scrollToBottomStyle?: StyleProp<ViewStyle>;\n  initialText?: string;\n  /* Placeholder when text is empty; default is 'Type a message...' */\n  placeholder?: string;\n  /* Makes the composer not editable */\n  disableComposer?: boolean;\n  /* User sending the messages: { _id, name, avatar } */\n  user?: User;\n  /*  Locale to localize the dates */\n  locale?: string;\n  /* Format to use for rendering times; default is 'LT' */\n  timeFormat?: string;\n  /* Format to use for rendering dates; default is 'll' */\n  dateFormat?: string;\n  /* Format to use for rendering relative times; Today - for now. See more: https://day.js.org/docs/en/plugin/calendar */\n  dateFormatCalendar?: object;\n  /* Enables the \"Load earlier messages\" button */\n  loadEarlier?: boolean;\n  /* Display an ActivityIndicator when loading earlier messages */\n  isLoadingEarlier?: boolean;\n  /* Determine whether to handle keyboard awareness inside the plugin. If you have your own keyboard handling outside the plugin set this to false; default is `true` */\n  isKeyboardInternallyHandled?: boolean;\n  /* Whether to render an avatar for the current user; default is false, only show avatars for other users */\n  showUserAvatar?: boolean;\n  /* When false, avatars will only be displayed when a consecutive message is from the same user on the same day; default is false */\n  showAvatarForEveryMessage?: boolean;\n  /* Render the message avatar at the top of consecutive messages, rather than the bottom; default is false */\n  renderAvatarOnTop?: boolean;\n  inverted?: boolean;\n  /* Distance of the chat from the bottom of the screen (e.g. useful if you display a tab bar); default is 0 */\n  bottomOffset?: number;\n  /* Focus on <TextInput> automatically when opening the keyboard; default is true */\n  focusOnInputWhenOpeningKeyboard?: boolean;\n  /* Minimum height of the input toolbar; default is 44 */\n  minInputToolbarHeight?: number;\n  /* Extra props to be passed to the messages <ListView>; some props can't be overridden, see the code in MessageContainer.render() for details */\n  listViewProps?: ListViewProps;\n  /*  Extra props to be passed to the <TextInput> */\n  textInputProps?: object;\n  /* Determines whether the keyboard should stay visible after a tap; see <ScrollView> docs */\n  keyboardShouldPersistTaps?: 'always' | 'never' | 'handled';\n  /* Max message composer TextInput length */\n  maxInputLength?: number;\n  /* Force send button */\n  alwaysShowSend?: boolean;\n  /* Image style */\n  imageStyle?: StyleProp<ViewStyle>;\n  /* This can be used to pass unknown data which needs to be re-rendered */\n  extraData?: object;\n  /* composer min Height */\n  minComposerHeight?: number;\n  /* composer min Height */\n  maxComposerHeight?: number;\n  options?: { [key: string]: () => void };\n  optionTintColor?: string;\n  quickReplyStyle?: StyleProp<ViewStyle>;\n  quickReplyTextStyle?: StyleProp<TextStyle>;\n  quickReplyContainerStyle?: StyleProp<ViewStyle>;\n  /* optional prop used to place customView below text, image and video views; default is false */\n  isCustomViewBottom?: boolean;\n  /* infinite scroll up when reach the top of messages container, automatically call onLoadEarlier function if exist */\n  infiniteScroll?: boolean;\n  /* Label reaction */\n  labelReaction?: string;\n  timeTextStyle?: LeftRightStyle<TextStyle>;\n  /* Custom action sheet */\n  actionSheet?(): {\n    showActionSheetWithOptions: (\n      options: ActionSheetOptions,\n      callback: (buttonIndex: number) => void | Promise<void>\n    ) => void;\n  };\n  /* Callback when a message avatar is tapped */\n  onPressAvatar?(user: User): void;\n  /* Callback when a message avatar is tapped */\n  onLongPressAvatar?(user: User): void;\n  /* Generate an id for new messages. Defaults to UUID v4, generated by uuid */\n  messageIdGenerator?(message?: TMessage): string;\n  /* Callback when sending a message */\n  onSend?(messages: TMessage[]): void;\n  /* Callback when loading earlier messages */\n  onLoadEarlier?(): void;\n  /*  Render a loading view when initializing */\n  renderLoading?(): React.ReactNode;\n  /* Custom \"Load earlier messages\" button */\n  renderLoadEarlier?(props: LoadEarlierProps): React.ReactNode;\n  /* Custom message avatar; set to null to not render any avatar for the message */\n  renderAvatar?: null | ((props: AvatarProps<TMessage>) => React.ReactNode);\n  /* Custom message bubble */\n  renderBubble?(props: BubbleProps<TMessage>): React.ReactNode;\n  /* Custom system message */\n  renderSystemMessage?(props: SystemMessageProps<TMessage>): React.ReactNode;\n  /* Callback when a message bubble is pressed; default is to do nothing */\n  onPress?(context: unknown, message: TMessage): void;\n  /* Callback when a message bubble is long-pressed; default is to show an ActionSheet with \"Copy Text\" (see example using showActionSheetWithOptions()) */\n  onLongPress?(context: unknown, message: TMessage): void;\n  /* Custom Username container */\n  renderUsername?(user: User): React.ReactNode;\n  /* Reverses display order of messages; default is true */\n  /* Custom message container */\n  renderMessage?(message: MessageProps<TMessage>): React.ReactElement;\n  /* Custom message text */\n  renderMessageText?(messageText: MessageTextProps<TMessage>): React.ReactNode;\n  /* Custom message video */\n  renderMessageVideo?(props: MessageVideoProps<TMessage>): React.ReactNode;\n  /* Custom message video */\n  renderMessageAudio?(props: MessageAudioProps<TMessage>): React.ReactNode;\n  /* Custom view inside the bubble */\n  renderCustomView?(props: BubbleProps<TMessage>): React.ReactNode;\n  /* Custom day above a message */\n  renderDay?(props: DayProps): React.ReactNode;\n  /* Custom time inside a message */\n  renderTime?(props: TimeProps<TMessage>): React.ReactNode;\n  /* Custom footer component on the ListView, e.g. 'User is typing...' */\n  renderFooter?(props: MessageContainerProps<TMessage>): React.ReactNode;\n  /* Custom component to render in the ListView when messages are empty */\n  renderChatEmpty?(): React.ReactNode;\n  /* Custom component to render below the MessageContainer (separate from the ListView) */\n  renderChatFooter?(): React.ReactNode;\n  /* Custom message composer container */\n  renderInputToolbar?(props: InputToolbarProps<TMessage>): React.ReactNode;\n  /*  Custom text input message composer */\n  renderComposer?(props: ComposerProps): React.ReactNode;\n  /* Custom action button on the left of the message composer */\n  renderActions?(props: ActionsProps): React.ReactNode;\n  /* Custom send button; you can pass children to the original Send component quite easily, for example to use a custom icon (example) */\n  renderSend?(props: SendProps<TMessage>): React.ReactNode;\n  /* Custom second line of actions below the message composer */\n  renderAccessory?(props: InputToolbarProps<TMessage>): React.ReactNode;\n  /* Callback when the Action button is pressed (if set, the default actionSheet will not be used) */\n  onPressActionButton?(): void;\n  /* Callback when the input text changes */\n  onInputTextChanged?(text: string): void;\n  /* Custom parse patterns for react-native-parsed-text used to linking message content (like URLs and phone numbers) */\n  parsePatterns?: (linkStyle?: TextStyle) => {\n    type?: string;\n    pattern?: RegExp;\n    style?: StyleProp<TextStyle> | object;\n    onPress?: unknown;\n    renderText?: unknown;\n  }[];\n  onQuickReply?(replies: Reply[]): void;\n  renderQuickReplies?(\n    quickReplies: QuickRepliesProps<TMessage>\n  ): React.ReactNode;\n  renderQuickReplySend?(): React.ReactNode;\n  /* Scroll to bottom custom component */\n  scrollToBottomComponent?(): React.ReactNode;\n  shouldUpdateMessage?(\n    props: MessageProps<TMessage>,\n    nextProps: MessageProps<TMessage>\n  ): boolean;\n  //phần này để làm reaction emoji\n  onReactionEmoji?(emoji: string, messageId: string): void;\n  // phần này để làm focus input\n  onFocusInput?: () => void;\n  // phần này để làm blur input\n  onBlurInput?: () => void;\n  // phần này để làm show emoji reaction\n  isShowEmojiReaction?: boolean;\n}\n"],"mappings":"","ignoreList":[]}