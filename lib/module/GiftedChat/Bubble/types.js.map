{"version":3,"names":[],"sources":["types.ts"],"sourcesContent":["import type React from 'react';\nimport type { StyleProp, ViewStyle, TextStyle } from 'react-native';\nimport type { QuickRepliesProps } from '../QuickReplies';\nimport type { MessageTextProps } from '../MessageText';\nimport type { TimeProps } from '../Time';\nimport type {\n  User,\n  IMessage,\n  LeftRightStyle,\n  Reply,\n  Omit,\n  MessageVideoProps,\n  MessageAudioProps,\n  FileMessage,\n} from '../types';\n\nexport type RenderCustomMessageFileProps<TMessage extends IMessage> = Omit<\n  BubbleProps<TMessage>,\n  'containerStyle' | 'wrapperStyle'\n> &\n  MessageVideoProps<TMessage>;\n\nexport type RenderMessageAudioProps<TMessage extends IMessage> = Omit<\n  BubbleProps<TMessage>,\n  'containerStyle' | 'wrapperStyle'\n> &\n  MessageAudioProps<TMessage>;\n\nexport type RenderMessageTextProps<TMessage extends IMessage> = Omit<\n  BubbleProps<TMessage>,\n  'containerStyle' | 'wrapperStyle'\n> &\n  MessageTextProps<TMessage>;\n\nexport interface BubbleProps<TMessage extends IMessage> {\n  user?: User;\n  touchableProps?: object;\n  renderUsernameOnMessage?: boolean;\n  isCustomViewBottom?: boolean;\n  inverted?: boolean;\n  position: 'left' | 'right';\n  currentMessage: TMessage;\n  nextMessage?: TMessage;\n  previousMessage?: TMessage;\n  optionTitles?: string[];\n  containerStyle?: LeftRightStyle<ViewStyle>;\n  wrapperStyle?: LeftRightStyle<ViewStyle>;\n  textStyle?: LeftRightStyle<TextStyle>;\n  bottomContainerStyle?: LeftRightStyle<ViewStyle>;\n  tickStyle?: StyleProp<TextStyle>;\n  containerToNextStyle?: LeftRightStyle<ViewStyle>;\n  containerToPreviousStyle?: LeftRightStyle<ViewStyle>;\n  usernameStyle?: TextStyle;\n  quickReplyStyle?: StyleProp<ViewStyle>;\n  quickReplyTextStyle?: StyleProp<TextStyle>;\n  quickReplyContainerStyle?: StyleProp<ViewStyle>;\n  isReaction?: boolean;\n  onPress?(context?: unknown, message?: unknown): void;\n  onLongPress?(context?: unknown, message?: unknown): void;\n  onQuickReply?(replies: Reply[]): void;\n  renderCustomMessageFile?(\n    props: RenderCustomMessageFileProps<TMessage>\n  ): React.ReactNode;\n  renderMessageAudio?(\n    props: RenderMessageAudioProps<TMessage>\n  ): React.ReactNode;\n  renderMessageText?(props: RenderMessageTextProps<TMessage>): React.ReactNode;\n  renderCustomView?(bubbleProps: BubbleProps<TMessage>): React.ReactNode;\n  renderTime?(timeProps: TimeProps<TMessage>): React.ReactNode;\n  renderTicks?(currentMessage: TMessage): React.ReactNode;\n  renderUsername?(user?: TMessage['user']): React.ReactNode;\n  renderQuickReplySend?(): React.ReactNode;\n  renderQuickReplies?(\n    quickReplies: QuickRepliesProps<TMessage>\n  ): React.ReactNode;\n  onPressFile?(image: FileMessage): void;\n  onLongPressReaction?(\n    message: TMessage,\n    position: {\n      x: number;\n      y: number;\n      width: number;\n      height: number;\n      pageX: number;\n      pageY: number;\n    }\n  ): void;\n}\n"],"mappings":"","ignoreList":[]}