{"version":3,"names":[],"sources":["types.ts"],"sourcesContent":["import { type StyleProp, type ViewStyle } from 'react-native';\r\n\r\nexport type { ActionsProps } from './Actions';\r\nexport type { AvatarProps } from './Avatar';\r\nexport type { BubbleProps } from './Bubble';\r\nexport type { ComposerProps } from './Composer';\r\nexport type { DayProps } from './Day';\r\nexport type { GiftedAvatarProps } from './GiftedAvatar';\r\nexport type { InputToolbarProps } from './InputToolbar';\r\nexport type { LoadEarlierProps } from './LoadEarlier';\r\nexport type { MessageProps } from './Message';\r\nexport type { MessageContainerProps } from './MessageContainer';\r\nexport type { MessageTextProps } from './MessageText';\r\nexport type { QuickRepliesProps } from './QuickReplies';\r\nexport type { SendProps } from './Send';\r\nexport type { SystemMessageProps } from './SystemMessage';\r\nexport type { TimeProps } from './Time';\r\n\r\nexport type Omit<T, K> = Pick<T, Exclude<keyof T, K>>;\r\n\r\nexport interface LeftRightStyle<T> {\r\n  left?: StyleProp<T>;\r\n  right?: StyleProp<T>;\r\n}\r\n\r\ntype renderFunction = (x: unknown) => React.ReactNode;\r\n\r\nexport interface User {\r\n  _id: string | number;\r\n  name?: string;\r\n  avatar?: string | number | renderFunction;\r\n}\r\n\r\nexport interface Reply {\r\n  title: string;\r\n  value: string;\r\n  messageId?: number | string;\r\n}\r\n\r\nexport interface QuickReplies {\r\n  type: 'radio' | 'checkbox';\r\n  values: Reply[];\r\n  keepIt?: boolean;\r\n}\r\n\r\nexport interface FileMessage {\r\n  clientId?: string;\r\n  uri: string;\r\n  id?: string;\r\n  size?: number;\r\n  name?: string;\r\n  fileExtension?: string;\r\n  typeFile?: 'image' | 'video';\r\n  thumbnailPreview?: string;\r\n  isLoading?: boolean;\r\n  width?: number;\r\n  height?: number;\r\n  duration?: number;\r\n  progress?: number;\r\n  mine?: string;\r\n  url?: string;\r\n}\r\n\r\nexport interface IMessage {\r\n  _id: string | number;\r\n  text: string;\r\n  createdAt: Date | number;\r\n  user: User;\r\n  file?: FileMessage[];\r\n  audio?: string;\r\n  system?: boolean;\r\n  sent?: boolean;\r\n  received?: boolean;\r\n  pending?: boolean;\r\n  quickReplies?: QuickReplies;\r\n  isLast?: boolean;\r\n  reactionEmoji?: { id: string; reaction: string; reactionType: string }[];\r\n  messageReply?: IMessage;\r\n  isSending?: boolean;\r\n  errorMessage?: string;\r\n  isShowName?: boolean;\r\n}\r\n\r\nexport type IChatMessage = IMessage;\r\n\r\nexport interface MessageVideoProps<TMessage extends IMessage> {\r\n  currentMessage: TMessage;\r\n  containerStyle?: StyleProp<ViewStyle>;\r\n  videoStyle?: StyleProp<ViewStyle>;\r\n  videoProps?: object;\r\n}\r\n\r\nexport interface MessageAudioProps<TMessage extends IMessage> {\r\n  currentMessage: TMessage;\r\n  containerStyle?: StyleProp<ViewStyle>;\r\n  audioStyle?: StyleProp<ViewStyle>;\r\n  audioProps?: object;\r\n}\r\n"],"mappings":"","ignoreList":[]}