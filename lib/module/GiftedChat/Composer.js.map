{"version":3,"names":["React","forwardRef","useCallback","useMemo","useRef","useState","Platform","StyleSheet","TextInput","View","Image","Text","MIN_COMPOSER_HEIGHT","DEFAULT_PLACEHOLDER","MAX_COMPOSER_HEIGHT","Color","stylesCommon","ButtonBase","Composer","composerHeight","disableComposer","keyboardAppearance","multiline","onInputSizeChanged","onTextChanged","placeholder","placeholderTextColor","defaultColor","textInputAutoFocus","text","textInputProps","textInputStyle","onPressPickMedia","onFocus","onBlur","ref","dimensionsRef","isFocused","setIsFocused","isPickerOpen","setIsPickerOpen","widthText","setWidthText","lineCount","setLineCount","determineInputSizeChange","dimensions","current","width","height","handleContentSizeChange","nativeEvent","contentSize","handleLayout","e","layout","lines","Math","max","round","borderRadiusByLineCount","heightInput","createElement","style","styles","container","opacity","onPress","tintColor","defaultBlue","resizeMode","source","require","Fragment","disabled","iconPick","textInputContainer","borderRadius","_extends","testID","accessible","accessibilityLabel","editable","onContentSizeChange","onChangeText","txt","fill","textInput","select","web","outlineWidth","outlineColor","outlineOffset","autoFocus","value","enablesReturnKeyAutomatically","underlineColorAndroid","onLayout","hiddenText","create","flex","flexDirection","alignItems","gap","backgroundColor","leftBubbleBackground","paddingHorizontal","paddingRight","paddingLeft","fontWeight","fontSize","lineHeight","paddingTop","marginTop","ios","android","marginBottom","position","top","left","inputPreview","txtPreview"],"sources":["Composer.tsx"],"sourcesContent":["import React, {\r\n  forwardRef,\r\n  useCallback,\r\n  useMemo,\r\n  useRef,\r\n  useState,\r\n} from 'react';\r\nimport {\r\n  Platform,\r\n  StyleSheet,\r\n  TextInput,\r\n  type TextInputProps,\r\n  type NativeSyntheticEvent,\r\n  type TextInputContentSizeChangeEventData,\r\n  View,\r\n  Image,\r\n  Text,\r\n  type LayoutChangeEvent,\r\n} from 'react-native';\r\nimport {\r\n  MIN_COMPOSER_HEIGHT,\r\n  DEFAULT_PLACEHOLDER,\r\n  MAX_COMPOSER_HEIGHT,\r\n} from './Constant';\r\nimport Color from './Color';\r\nimport stylesCommon from './styles';\r\nimport { ButtonBase } from '../ButtonBase';\r\n\r\nexport interface ComposerProps {\r\n  composerHeight?: number;\r\n  text?: string;\r\n  placeholder?: string;\r\n  placeholderTextColor?: string;\r\n  textInputProps?: Partial<TextInputProps>;\r\n  textInputStyle?: TextInputProps['style'];\r\n  textInputAutoFocus?: boolean;\r\n  keyboardAppearance?: TextInputProps['keyboardAppearance'];\r\n  multiline?: boolean;\r\n  disableComposer?: boolean;\r\n  onTextChanged?(text: string): void;\r\n  onInputSizeChanged?(layout: { width: number; height: number }): void;\r\n  onPressPickMedia?: (type: 'camera' | 'pick') => void;\r\n  onFocus?: () => void;\r\n  onBlur?: () => void;\r\n}\r\n\r\nexport const Composer = forwardRef(\r\n  (\r\n    {\r\n      composerHeight = MIN_COMPOSER_HEIGHT,\r\n      disableComposer = false,\r\n      keyboardAppearance = 'default',\r\n      multiline = true,\r\n      onInputSizeChanged,\r\n      onTextChanged,\r\n      placeholder = DEFAULT_PLACEHOLDER,\r\n      placeholderTextColor = Color.defaultColor,\r\n      textInputAutoFocus = false,\r\n      text,\r\n      textInputProps,\r\n      textInputStyle,\r\n      onPressPickMedia,\r\n      onFocus,\r\n      onBlur,\r\n    }: ComposerProps,\r\n    ref: React.Ref<TextInput>\r\n  ) => {\r\n    const dimensionsRef: any = useRef<{ width: number; height: number }>(null);\r\n    const [isFocused, setIsFocused] = useState(false);\r\n    const [isPickerOpen, setIsPickerOpen] = useState(false);\r\n    const [widthText, setWidthText] = useState(0);\r\n    const [lineCount, setLineCount] = useState(1);\r\n\r\n    const determineInputSizeChange = useCallback(\r\n      (dimensions: { width: number; height: number }) => {\r\n        // Support earlier versions of React Native on Android.\r\n        if (!dimensions) return;\r\n\r\n        if (\r\n          !dimensionsRef.current ||\r\n          (dimensionsRef.current &&\r\n            (dimensionsRef.current.width !== dimensions.width ||\r\n              dimensionsRef.current.height !== dimensions.height))\r\n        ) {\r\n          dimensionsRef.current = dimensions;\r\n          setWidthText(dimensions.width);\r\n          onInputSizeChanged?.(dimensions);\r\n        }\r\n      },\r\n      [onInputSizeChanged]\r\n    );\r\n\r\n    const handleContentSizeChange = useCallback(\r\n      ({\r\n        nativeEvent: { contentSize },\r\n      }: NativeSyntheticEvent<TextInputContentSizeChangeEventData>) =>\r\n        determineInputSizeChange(contentSize),\r\n      [determineInputSizeChange]\r\n    );\r\n\r\n    const handleLayout = (e: LayoutChangeEvent) => {\r\n      const height = e.nativeEvent.layout.height;\r\n      const lines = Math.max(1, Math.round(height / 22));\r\n      setLineCount(lines);\r\n    };\r\n\r\n    const borderRadiusByLineCount = useMemo(() => {\r\n      if (lineCount === 1) {\r\n        return 100;\r\n      }\r\n      return 16;\r\n    }, [lineCount]);\r\n\r\n    const heightInput = useMemo(() => {\r\n      if (lineCount === 1) {\r\n        return composerHeight;\r\n      }\r\n      const height = lineCount * 22;\r\n      if (height > MAX_COMPOSER_HEIGHT / 2) {\r\n        return MAX_COMPOSER_HEIGHT / 2 + 20;\r\n      }\r\n      return height;\r\n    }, [lineCount, composerHeight]);\r\n\r\n    return (\r\n      <View style={[styles.container, { opacity: disableComposer ? 0.5 : 1 }]}>\r\n        {isFocused && !isPickerOpen && (\r\n          <ButtonBase onPress={() => setIsPickerOpen(true)}>\r\n            <Image\r\n              tintColor={Color.defaultBlue}\r\n              resizeMode=\"contain\"\r\n              source={require('./assets/next.png')}\r\n              style={{ width: 18, height: 18 }}\r\n            />\r\n          </ButtonBase>\r\n        )}\r\n        {(!isFocused || isPickerOpen) && (\r\n          <>\r\n            <ButtonBase\r\n              disabled={disableComposer}\r\n              onPress={() => onPressPickMedia?.('camera')}\r\n            >\r\n              <Image\r\n                tintColor={Color.defaultBlue}\r\n                resizeMode=\"contain\"\r\n                source={require('./assets/camera.png')}\r\n                style={styles.iconPick}\r\n              />\r\n            </ButtonBase>\r\n\r\n            <ButtonBase\r\n              disabled={disableComposer}\r\n              onPress={() => onPressPickMedia?.('pick')}\r\n            >\r\n              <Image\r\n                tintColor={Color.defaultBlue}\r\n                resizeMode=\"contain\"\r\n                source={require('./assets/photo.png')}\r\n                style={styles.iconPick}\r\n              />\r\n            </ButtonBase>\r\n          </>\r\n        )}\r\n\r\n        {/* <ButtonBase>\r\n        <Image source={require('../assets/mic.png')} style={styles.iconPick} />\r\n      </ButtonBase> */}\r\n\r\n        <View\r\n          style={[\r\n            styles.textInputContainer,\r\n            {\r\n              borderRadius: borderRadiusByLineCount,\r\n            },\r\n          ]}\r\n        >\r\n          <TextInput\r\n            ref={ref}\r\n            testID={placeholder}\r\n            accessible\r\n            accessibilityLabel={placeholder}\r\n            placeholder={placeholder}\r\n            placeholderTextColor={placeholderTextColor}\r\n            multiline={multiline}\r\n            editable={!disableComposer}\r\n            onContentSizeChange={handleContentSizeChange}\r\n            onChangeText={(txt) => {\r\n              onTextChanged?.(txt);\r\n              setIsPickerOpen(false);\r\n            }}\r\n            style={[\r\n              stylesCommon.fill,\r\n              styles.textInput,\r\n              textInputStyle,\r\n              {\r\n                height: heightInput,\r\n                ...Platform.select({\r\n                  web: {\r\n                    outlineWidth: 0,\r\n                    outlineColor: 'transparent',\r\n                    outlineOffset: 0,\r\n                  },\r\n                }),\r\n              },\r\n            ]}\r\n            autoFocus={textInputAutoFocus}\r\n            value={text}\r\n            enablesReturnKeyAutomatically\r\n            underlineColorAndroid=\"transparent\"\r\n            keyboardAppearance={keyboardAppearance}\r\n            onFocus={() => {\r\n              setIsFocused(true);\r\n              onFocus?.();\r\n            }}\r\n            onBlur={() => {\r\n              setIsFocused(false);\r\n              setIsPickerOpen(false);\r\n              onBlur?.();\r\n            }}\r\n            {...textInputProps}\r\n          />\r\n\r\n          <Text\r\n            onLayout={handleLayout}\r\n            style={[\r\n              styles.hiddenText,\r\n              {\r\n                width: widthText,\r\n              },\r\n            ]}\r\n          >\r\n            {text}\r\n          </Text>\r\n\r\n          {/* <ButtonBase>\r\n          <Image\r\n            tintColor={Color.defaultBlue}\r\n            resizeMode=\"contain\"\r\n            source={require('../assets/smileFace.png')}\r\n            style={styles.iconPick}\r\n          />\r\n        </ButtonBase> */}\r\n        </View>\r\n      </View>\r\n    );\r\n  }\r\n);\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n    gap: 16,\r\n  },\r\n  textInputContainer: {\r\n    flex: 1,\r\n    flexDirection: 'row',\r\n    alignItems: 'center',\r\n    gap: 8,\r\n    backgroundColor: Color.leftBubbleBackground,\r\n    paddingHorizontal: 8,\r\n  },\r\n  textInput: {\r\n    paddingRight: 8,\r\n    paddingLeft: 8,\r\n    fontWeight: '400',\r\n    fontSize: 16,\r\n    lineHeight: 22,\r\n    ...Platform.select({\r\n      web: {\r\n        paddingTop: 6,\r\n        paddingLeft: 4,\r\n      },\r\n    }),\r\n    marginTop: Platform.select({\r\n      ios: 6,\r\n      android: 0,\r\n      web: 6,\r\n    }),\r\n    marginBottom: Platform.select({\r\n      ios: 5,\r\n      android: 3,\r\n      web: 4,\r\n    }),\r\n  },\r\n  iconPick: {\r\n    width: 24,\r\n    height: 24,\r\n  },\r\n  hiddenText: {\r\n    position: 'absolute',\r\n    top: -9999,\r\n    left: -9999,\r\n    paddingRight: 8,\r\n    paddingLeft: 8,\r\n    fontWeight: '600',\r\n    fontSize: 16,\r\n    lineHeight: 22,\r\n    ...Platform.select({\r\n      web: {\r\n        paddingTop: 6,\r\n        paddingLeft: 4,\r\n      },\r\n    }),\r\n    marginTop: Platform.select({\r\n      ios: 6,\r\n      android: 0,\r\n      web: 6,\r\n    }),\r\n    marginBottom: Platform.select({\r\n      ios: 5,\r\n      android: 3,\r\n      web: 4,\r\n    }),\r\n  },\r\n  inputPreview: {\r\n    paddingRight: 8,\r\n    paddingLeft: 8,\r\n    ...Platform.select({\r\n      web: {\r\n        paddingTop: 6,\r\n        paddingLeft: 4,\r\n      },\r\n    }),\r\n    marginTop: Platform.select({\r\n      ios: 6,\r\n      android: 0,\r\n      web: 6,\r\n    }),\r\n    marginBottom: Platform.select({\r\n      ios: 5,\r\n      android: 3,\r\n      web: 4,\r\n    }),\r\n  },\r\n  txtPreview: {\r\n    fontWeight: '600',\r\n    fontSize: 16,\r\n    lineHeight: 22,\r\n  },\r\n});\r\n"],"mappings":"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","ignoreList":[]}