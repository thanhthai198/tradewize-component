{"version":3,"names":[],"sources":["types.ts"],"sourcesContent":["import React, { type RefObject } from 'react';\r\nimport { type ActionSheetOptions } from '@expo/react-native-action-sheet';\r\nimport {\r\n  type TextInput,\r\n  type StyleProp,\r\n  type TextStyle,\r\n  type ViewStyle,\r\n} from 'react-native';\r\nimport { type ActionsProps } from '../Actions';\r\nimport { type AvatarProps } from '../Avatar';\r\nimport { type ComposerProps } from '../Composer';\r\nimport { type DayProps } from '../Day';\r\nimport { type InputToolbarProps } from '../InputToolbar';\r\nimport { type LoadEarlierProps } from '../LoadEarlier';\r\nimport { type MessageProps } from '../Message';\r\nimport { type MessageTextProps } from '../MessageText';\r\nimport {\r\n  type IMessage,\r\n  type LeftRightStyle,\r\n  type MessageAudioProps,\r\n  type MessageVideoProps,\r\n  type Reply,\r\n  type User,\r\n} from '../types';\r\nimport { type QuickRepliesProps } from '../QuickReplies';\r\nimport { type SendProps } from '../Send';\r\nimport { type SystemMessageProps } from '../SystemMessage';\r\nimport { type TimeProps } from '../Time';\r\nimport {\r\n  type AnimatedList,\r\n  type ListViewProps,\r\n  type MessageContainerProps,\r\n} from '../MessageContainer';\r\nimport { type BubbleProps } from '../Bubble';\r\n\r\nexport interface GiftedChatProps<TMessage extends IMessage>\r\n  extends Partial<MessageContainerProps<TMessage>> {\r\n  /* Message container ref */\r\n  messageContainerRef?: RefObject<AnimatedList<TMessage>>;\r\n  /* text input ref */\r\n  textInputRef?: RefObject<TextInput>;\r\n  /* Messages to display */\r\n  messages?: TMessage[];\r\n  /* Typing Indicator state */\r\n  isTyping?: boolean;\r\n  /* Controls whether or not to show user.name property in the message bubble */\r\n  renderUsernameOnMessage?: boolean;\r\n  /* Messages container style */\r\n  messagesContainerStyle?: StyleProp<ViewStyle>;\r\n  /* Input text; default is undefined, but if specified, it will override GiftedChat's internal state */\r\n  text?: string;\r\n  /* Controls whether or not the message bubbles appear at the top of the chat */\r\n  alignTop?: boolean;\r\n  /* enables the isScrollToBottomEnabled Component */\r\n  isScrollToBottomEnabled?: boolean;\r\n  /* Scroll to bottom wrapper style */\r\n  scrollToBottomStyle?: StyleProp<ViewStyle>;\r\n  initialText?: string;\r\n  /* Placeholder when text is empty; default is 'Type a message...' */\r\n  placeholder?: string;\r\n  /* Makes the composer not editable */\r\n  disableComposer?: boolean;\r\n  /* User sending the messages: { _id, name, avatar } */\r\n  user?: User;\r\n  /*  Locale to localize the dates */\r\n  locale?: string;\r\n  /* Format to use for rendering times; default is 'LT' */\r\n  timeFormat?: string;\r\n  /* Format to use for rendering dates; default is 'll' */\r\n  dateFormat?: string;\r\n  /* Format to use for rendering relative times; Today - for now. See more: https://day.js.org/docs/en/plugin/calendar */\r\n  dateFormatCalendar?: object;\r\n  /* Enables the \"Load earlier messages\" button */\r\n  loadEarlier?: boolean;\r\n  /* Display an ActivityIndicator when loading earlier messages */\r\n  isLoadingEarlier?: boolean;\r\n  /* Determine whether to handle keyboard awareness inside the plugin. If you have your own keyboard handling outside the plugin set this to false; default is `true` */\r\n  isKeyboardInternallyHandled?: boolean;\r\n  /* Whether to render an avatar for the current user; default is false, only show avatars for other users */\r\n  showUserAvatar?: boolean;\r\n  /* When false, avatars will only be displayed when a consecutive message is from the same user on the same day; default is false */\r\n  showAvatarForEveryMessage?: boolean;\r\n  /* Render the message avatar at the top of consecutive messages, rather than the bottom; default is false */\r\n  renderAvatarOnTop?: boolean;\r\n  inverted?: boolean;\r\n  /* Distance of the chat from the bottom of the screen (e.g. useful if you display a tab bar); default is 0 */\r\n  bottomOffset?: number;\r\n  /* Focus on <TextInput> automatically when opening the keyboard; default is true */\r\n  focusOnInputWhenOpeningKeyboard?: boolean;\r\n  /* Minimum height of the input toolbar; default is 44 */\r\n  minInputToolbarHeight?: number;\r\n  /* Extra props to be passed to the messages <ListView>; some props can't be overridden, see the code in MessageContainer.render() for details */\r\n  listViewProps?: ListViewProps;\r\n  /*  Extra props to be passed to the <TextInput> */\r\n  textInputProps?: object;\r\n  /* Determines whether the keyboard should stay visible after a tap; see <ScrollView> docs */\r\n  keyboardShouldPersistTaps?: 'always' | 'never' | 'handled';\r\n  /* Max message composer TextInput length */\r\n  maxInputLength?: number;\r\n  /* Force send button */\r\n  alwaysShowSend?: boolean;\r\n  /* Image style */\r\n  imageStyle?: StyleProp<ViewStyle>;\r\n  /* This can be used to pass unknown data which needs to be re-rendered */\r\n  extraData?: object;\r\n  /* composer min Height */\r\n  minComposerHeight?: number;\r\n  /* composer min Height */\r\n  maxComposerHeight?: number;\r\n  options?: { [key: string]: () => void };\r\n  optionTintColor?: string;\r\n  quickReplyStyle?: StyleProp<ViewStyle>;\r\n  quickReplyTextStyle?: StyleProp<TextStyle>;\r\n  quickReplyContainerStyle?: StyleProp<ViewStyle>;\r\n  /* optional prop used to place customView below text, image and video views; default is false */\r\n  isCustomViewBottom?: boolean;\r\n  /* infinite scroll up when reach the top of messages container, automatically call onLoadEarlier function if exist */\r\n  infiniteScroll?: boolean;\r\n  /* Label reaction */\r\n  labelReaction?: string;\r\n  timeTextStyle?: LeftRightStyle<TextStyle>;\r\n  /* Custom action sheet */\r\n  actionSheet?(): {\r\n    showActionSheetWithOptions: (\r\n      options: ActionSheetOptions,\r\n      callback: (buttonIndex: number) => void | Promise<void>\r\n    ) => void;\r\n  };\r\n  /* Callback when a message avatar is tapped */\r\n  onPressAvatar?(user: User): void;\r\n  /* Callback when a message avatar is tapped */\r\n  onLongPressAvatar?(user: User): void;\r\n  /* Generate an id for new messages. Defaults to UUID v4, generated by uuid */\r\n  messageIdGenerator?(message?: TMessage): string;\r\n  /* Callback when sending a message */\r\n  onSend?(messages: TMessage[]): void;\r\n  /* Callback when loading earlier messages */\r\n  onLoadEarlier?(): void;\r\n  /*  Render a loading view when initializing */\r\n  renderLoading?(): React.ReactNode;\r\n  /* Custom \"Load earlier messages\" button */\r\n  renderLoadEarlier?(props: LoadEarlierProps): React.ReactNode;\r\n  /* Custom message avatar; set to null to not render any avatar for the message */\r\n  renderAvatar?: null | ((props: AvatarProps<TMessage>) => React.ReactNode);\r\n  /* Custom message bubble */\r\n  renderBubble?(props: BubbleProps<TMessage>): React.ReactNode;\r\n  /* Custom system message */\r\n  renderSystemMessage?(props: SystemMessageProps<TMessage>): React.ReactNode;\r\n  /* Callback when a message bubble is pressed; default is to do nothing */\r\n  onPress?(context: unknown, message: TMessage): void;\r\n  /* Callback when a message bubble is long-pressed; default is to show an ActionSheet with \"Copy Text\" (see example using showActionSheetWithOptions()) */\r\n  onLongPress?(context: unknown, message: TMessage): void;\r\n  /* Custom Username container */\r\n  renderUsername?(user: User): React.ReactNode;\r\n  /* Reverses display order of messages; default is true */\r\n  /* Custom message container */\r\n  renderMessage?(message: MessageProps<TMessage>): React.ReactElement;\r\n  /* Custom message text */\r\n  renderMessageText?(messageText: MessageTextProps<TMessage>): React.ReactNode;\r\n  /* Custom message video */\r\n  renderMessageVideo?(props: MessageVideoProps<TMessage>): React.ReactNode;\r\n  /* Custom message video */\r\n  renderMessageAudio?(props: MessageAudioProps<TMessage>): React.ReactNode;\r\n  /* Custom view inside the bubble */\r\n  renderCustomView?(props: BubbleProps<TMessage>): React.ReactNode;\r\n  /* Custom day above a message */\r\n  renderDay?(props: DayProps): React.ReactNode;\r\n  /* Custom time inside a message */\r\n  renderTime?(props: TimeProps<TMessage>): React.ReactNode;\r\n  /* Custom footer component on the ListView, e.g. 'User is typing...' */\r\n  renderFooter?(props: MessageContainerProps<TMessage>): React.ReactNode;\r\n  /* Custom component to render in the ListView when messages are empty */\r\n  renderChatEmpty?(): React.ReactNode;\r\n  /* Custom component to render below the MessageContainer (separate from the ListView) */\r\n  renderChatFooter?(): React.ReactNode;\r\n  /* Custom message composer container */\r\n  renderInputToolbar?(props: InputToolbarProps<TMessage>): React.ReactNode;\r\n  /*  Custom text input message composer */\r\n  renderComposer?(props: ComposerProps): React.ReactNode;\r\n  /* Custom action button on the left of the message composer */\r\n  renderActions?(props: ActionsProps): React.ReactNode;\r\n  /* Custom send button; you can pass children to the original Send component quite easily, for example to use a custom icon (example) */\r\n  renderSend?(props: SendProps<TMessage>): React.ReactNode;\r\n  /* Custom second line of actions below the message composer */\r\n  renderAccessory?(props: InputToolbarProps<TMessage>): React.ReactNode;\r\n  /* Callback when the Action button is pressed (if set, the default actionSheet will not be used) */\r\n  onPressActionButton?(): void;\r\n  /* Callback when the input text changes */\r\n  onInputTextChanged?(text: string): void;\r\n  /* Custom parse patterns for react-native-parsed-text used to linking message content (like URLs and phone numbers) */\r\n  parsePatterns?: (linkStyle?: TextStyle) => {\r\n    type?: string;\r\n    pattern?: RegExp;\r\n    style?: StyleProp<TextStyle> | object;\r\n    onPress?: unknown;\r\n    renderText?: unknown;\r\n  }[];\r\n  onQuickReply?(replies: Reply[]): void;\r\n  renderQuickReplies?(\r\n    quickReplies: QuickRepliesProps<TMessage>\r\n  ): React.ReactNode;\r\n  renderQuickReplySend?(): React.ReactNode;\r\n  /* Scroll to bottom custom component */\r\n  scrollToBottomComponent?(): React.ReactNode;\r\n  shouldUpdateMessage?(\r\n    props: MessageProps<TMessage>,\r\n    nextProps: MessageProps<TMessage>\r\n  ): boolean;\r\n  //phần này để làm reaction emoji\r\n  onReactionEmoji?(emoji: string, messageId: string): void;\r\n  // phần này để làm focus input\r\n  onFocusInput?: () => void;\r\n  // phần này để làm blur input\r\n  onBlurInput?: () => void;\r\n  // phần này để làm show emoji reaction\r\n  isShowEmojiReaction?: boolean;\r\n}\r\n"],"mappings":"","ignoreList":[]}