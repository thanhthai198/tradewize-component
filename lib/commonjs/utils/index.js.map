{"version":3,"names":["_reactNative","require","getScreenWidth","Dimensions","get","width","exports","getScreenHeight","height","parseVtt","vtt","lines","split","entries","i","length","_lines$i","line","trim","includes","startRaw","endRaw","map","s","start","timeToSeconds","end","text","j","_lines$j","_lines$j2","push","time","hh","mm","ss","ms","parseInt"],"sources":["index.tsx"],"sourcesContent":["import { Dimensions } from 'react-native';\nimport type { SubtitleEntry } from '../types';\n\nconst getScreenWidth = () => {\n  return Dimensions.get('window').width;\n};\n\nconst getScreenHeight = () => {\n  return Dimensions.get('window').height;\n};\n\nconst parseVtt = (vtt: string): SubtitleEntry[] => {\n  const lines = vtt.split('\\n');\n  const entries: SubtitleEntry[] = [];\n\n  for (let i = 0; i < lines.length; i++) {\n    const line = lines[i]?.trim();\n    if (!line) continue;\n\n    if (line.includes('-->')) {\n      const [startRaw, endRaw] = line.split('-->').map((s) => s.trim());\n      if (!startRaw || !endRaw) continue;\n\n      const start = timeToSeconds(startRaw);\n      const end = timeToSeconds(endRaw);\n\n      let text = '';\n      let j = i + 1;\n      while (j < lines.length && lines[j]?.trim()) {\n        text += lines[j]?.trim() + ' ';\n        j++;\n      }\n\n      entries.push({ start, end, text: text.trim() });\n    }\n  }\n\n  return entries;\n};\n\nconst timeToSeconds = (time: string): number => {\n  const [hh, mm, ss] = time.split(':');\n  if (!hh || !mm || !ss) return 0;\n\n  const [s, ms] = ss.split('.');\n  if (!s) return 0;\n\n  return (\n    parseInt(hh, 10) * 3600 +\n    parseInt(mm, 10) * 60 +\n    parseInt(s, 10) +\n    parseInt(ms || '0', 10) / 1000\n  );\n};\n\nexport { getScreenWidth, getScreenHeight, parseVtt };\n"],"mappings":";;;;;;AAAA,IAAAA,YAAA,GAAAC,OAAA;AAGA,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAC3B,OAAOC,uBAAU,CAACC,GAAG,CAAC,QAAQ,CAAC,CAACC,KAAK;AACvC,CAAC;AAACC,OAAA,CAAAJ,cAAA,GAAAA,cAAA;AAEF,MAAMK,eAAe,GAAGA,CAAA,KAAM;EAC5B,OAAOJ,uBAAU,CAACC,GAAG,CAAC,QAAQ,CAAC,CAACI,MAAM;AACxC,CAAC;AAACF,OAAA,CAAAC,eAAA,GAAAA,eAAA;AAEF,MAAME,QAAQ,GAAIC,GAAW,IAAsB;EACjD,MAAMC,KAAK,GAAGD,GAAG,CAACE,KAAK,CAAC,IAAI,CAAC;EAC7B,MAAMC,OAAwB,GAAG,EAAE;EAEnC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,KAAK,CAACI,MAAM,EAAED,CAAC,EAAE,EAAE;IAAA,IAAAE,QAAA;IACrC,MAAMC,IAAI,IAAAD,QAAA,GAAGL,KAAK,CAACG,CAAC,CAAC,cAAAE,QAAA,uBAARA,QAAA,CAAUE,IAAI,CAAC,CAAC;IAC7B,IAAI,CAACD,IAAI,EAAE;IAEX,IAAIA,IAAI,CAACE,QAAQ,CAAC,KAAK,CAAC,EAAE;MACxB,MAAM,CAACC,QAAQ,EAAEC,MAAM,CAAC,GAAGJ,IAAI,CAACL,KAAK,CAAC,KAAK,CAAC,CAACU,GAAG,CAAEC,CAAC,IAAKA,CAAC,CAACL,IAAI,CAAC,CAAC,CAAC;MACjE,IAAI,CAACE,QAAQ,IAAI,CAACC,MAAM,EAAE;MAE1B,MAAMG,KAAK,GAAGC,aAAa,CAACL,QAAQ,CAAC;MACrC,MAAMM,GAAG,GAAGD,aAAa,CAACJ,MAAM,CAAC;MAEjC,IAAIM,IAAI,GAAG,EAAE;MACb,IAAIC,CAAC,GAAGd,CAAC,GAAG,CAAC;MACb,OAAOc,CAAC,GAAGjB,KAAK,CAACI,MAAM,KAAAc,QAAA,GAAIlB,KAAK,CAACiB,CAAC,CAAC,cAAAC,QAAA,eAARA,QAAA,CAAUX,IAAI,CAAC,CAAC,EAAE;QAAA,IAAAW,QAAA,EAAAC,SAAA;QAC3CH,IAAI,IAAI,EAAAG,SAAA,GAAAnB,KAAK,CAACiB,CAAC,CAAC,cAAAE,SAAA,uBAARA,SAAA,CAAUZ,IAAI,CAAC,CAAC,IAAG,GAAG;QAC9BU,CAAC,EAAE;MACL;MAEAf,OAAO,CAACkB,IAAI,CAAC;QAAEP,KAAK;QAAEE,GAAG;QAAEC,IAAI,EAAEA,IAAI,CAACT,IAAI,CAAC;MAAE,CAAC,CAAC;IACjD;EACF;EAEA,OAAOL,OAAO;AAChB,CAAC;AAACP,OAAA,CAAAG,QAAA,GAAAA,QAAA;AAEF,MAAMgB,aAAa,GAAIO,IAAY,IAAa;EAC9C,MAAM,CAACC,EAAE,EAAEC,EAAE,EAAEC,EAAE,CAAC,GAAGH,IAAI,CAACpB,KAAK,CAAC,GAAG,CAAC;EACpC,IAAI,CAACqB,EAAE,IAAI,CAACC,EAAE,IAAI,CAACC,EAAE,EAAE,OAAO,CAAC;EAE/B,MAAM,CAACZ,CAAC,EAAEa,EAAE,CAAC,GAAGD,EAAE,CAACvB,KAAK,CAAC,GAAG,CAAC;EAC7B,IAAI,CAACW,CAAC,EAAE,OAAO,CAAC;EAEhB,OACEc,QAAQ,CAACJ,EAAE,EAAE,EAAE,CAAC,GAAG,IAAI,GACvBI,QAAQ,CAACH,EAAE,EAAE,EAAE,CAAC,GAAG,EAAE,GACrBG,QAAQ,CAACd,CAAC,EAAE,EAAE,CAAC,GACfc,QAAQ,CAACD,EAAE,IAAI,GAAG,EAAE,EAAE,CAAC,GAAG,IAAI;AAElC,CAAC","ignoreList":[]}