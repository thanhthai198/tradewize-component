import React from 'react';
import type { ViewStyle, TextStyle, GestureResponderEvent } from 'react-native';
import type { TouchableOpacityProps } from 'react-native';
export type ButtonVariant = 'primary' | 'secondary' | 'outline' | 'ghost' | 'danger' | 'success' | 'warning';
export type ButtonSize = 'small' | 'medium' | 'large' | 'xlarge';
export type ButtonShape = 'rounded' | 'pill' | 'square';
interface ButtonBaseProps extends TouchableOpacityProps {
    title?: string;
    children?: React.ReactNode;
    onPress?: (event: GestureResponderEvent) => void;
    disabled?: boolean;
    loading?: boolean;
    disableColorChange?: boolean;
    variant?: ButtonVariant;
    size?: ButtonSize;
    shape?: ButtonShape;
    backgroundColor?: string;
    textColor?: string;
    borderColor?: string;
    borderRadius?: number;
    disabledBackgroundColor?: string;
    disabledTextColor?: string;
    disabledBorderColor?: string;
    loadingBackgroundColor?: string;
    loadingTextColor?: string;
    loadingBorderColor?: string;
    fullWidth?: boolean;
    alignSelf?: 'auto' | 'flex-start' | 'flex-end' | 'center' | 'stretch';
    style?: ViewStyle;
    textStyle?: TextStyle;
    containerStyle?: ViewStyle;
    debounceTime?: number;
    activeOpacity?: number;
    leftIcon?: React.ReactNode;
    rightIcon?: React.ReactNode;
    iconSpacing?: number;
    customLoadingComponent?: React.ReactNode;
    accessibilityLabel?: string;
    accessibilityHint?: string;
    accessibilityRole?: 'button' | 'link' | 'none' | 'checkbox';
    pressable?: boolean;
    shadow?: boolean;
    shadowColor?: string;
    shadowOffset?: {
        width: number;
        height: number;
    };
    shadowOpacity?: number;
    shadowRadius?: number;
    borderWidth?: number;
    borderStyle?: 'solid' | 'dotted' | 'dashed';
}
export declare const ButtonBase: React.FC<ButtonBaseProps>;
export {};
